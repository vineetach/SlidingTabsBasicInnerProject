apply plugin: 'com.android.application'

repositories {
    jcenter()
    mavenCentral()
}
// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
    'main',     // main sample code; look here for the interesting stuff.
    'common',   // components that are reused by multiple samples
    'template'] // boilerplate code that is generated by the sample template process

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    defaultConfig {
        minSdkVersion 13
        targetSdkVersion 24

        applicationId "com.example.android.oauthTesting_slidingTabBasic"
        versionCode 2
        versionName "1.1"
        multiDexEnabled true
        generatedDensities = []

        resValue "string", "server_ip", "qa-r4e-mobile.reputation.com"
    }


    lintOptions {
        // set to true to turn off analysis progress reporting by lint 
        quiet true
        // if true, stop the gradle build if errors are found 
        abortOnError false
        // if true, only report errors 
        ignoreWarnings true
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    /*signingConfigs {
        release {
            storeFile file(androidkeystore)
            storePassword storepassword
            keyAlias keyalias
            keyPassword keypassword
        }
    }*/

    buildTypes {
        debug {
            debuggable true
        }

        prod {
            minifyEnabled false
            //signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            debuggable false

            resValue "string", "server_ip", "r4e-mobile.reputation.com"
        }

        qa {
            minifyEnabled true
            //signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            debuggable true
        }

        dev {
            minifyEnabled false
            //signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            debuggable true

            resValue "string", "server_ip", "dev-mobile01.r4e-dev.reputation.ec2"
            resValue "integer", "server_port", "40003"
            resValue "string", "server_protocol", "http"
        }

        applicationVariants.all { variant ->
            if (variant.buildType.name.equals("qa") || variant.buildType.name.equals("prod") || variant.buildType.name.equals("dev")) {
                variant.productFlavors.each { flavor ->
                    variant.outputs.each { output ->

                        //Note:- This is read from ~/.gradle/gradle.properties file. Do not put gradle.properties in project folder
                        //def destination = builds_archive_folder;
                        //destination += "/" + flavor.name;

                        def taskSuffix = variant.name.capitalize()
                        def buildNumber = System.getenv("BUDDYBUILD_BUILD_NUMBER") as Integer ?: "";

                        def assembleTaskName = "assemble${taskSuffix}"

                        if (tasks.findByName(assembleTaskName)) {
                            def apk = output.outputFile;
                            def newName;

                            def apkName = "r4e-smb-android";
                            def snapshot = "";

                            if (variant.buildType.name == "qa" || variant.buildType.name == "dev") {
                                snapshot += "-SNAPSHOT";
                            }

                            def buildType = variant.buildType.name;

                            def signed = "signed-";

                            def zipAligned = "";

                            if (variant.buildType.zipAlignEnabled) {
                                zipAligned += "aligned";
                            } else {
                                zipAligned += "unaligned";
                            }


                            def scriptBuildNumber = buildNumber;
                            if (buildNumber.equals("")) {
                                scriptBuildNumber = "1";
                            } else {
                                buildNumber += "-";
                            }


                            newName = apkName + "-" + defaultConfig.versionName + snapshot + "-" + flavor.name + "-" + buildType + "-" + buildNumber + signed + zipAligned;

                            output.outputFile = new File(apk.parentFile, newName + ".apk");

                        }
                    }
                }
            }
        }
    }

    productFlavors {
        reputation {
            applicationId "com.example.android.oauthTesting_slidingTabBasic"

        }

        ford {
            applicationId "com.example.ford.android.oauthTesting_slidingTabBasic"
        }
    }

    sourceSets {
        reputation { assets.srcDirs = ['src/reputation/assets/'] }
        ford { assets.srcDirs = ['src/ford/assets/'] }

        reputation { res.srcDirs = ['src/reputation/res'] }
        ford { res.srcDirs = ['src/ford/res'] }

        main {
            res.srcDirs = ['src/main/res']
           /* dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }*/
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']

    }
}

dependencies {
    compile 'com.android.support:support-v4:24.2.1'
    compile 'com.facebook.android:facebook-android-sdk:4.5.0'
    compile 'com.google.android.gms:play-services-auth:9.8.0'
}